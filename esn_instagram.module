<?php
/**
 * @file
 * Widget for Instagram account exclusively for Erasmus Student Network, HSE Russia department
 * Andrey Sokolov <sokolov-as-i@yandex.ru>
 *
 * See LICENSE file for terms of use
 */


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function esn_instagram_help($path, $arg) {
  switch ($path) {
    case "admin/help#esn_instagram":
      return '' . t("Widget displaying ESN corporate Instagram account") . '';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function esn_instagram_block_info() {
  $blocks['esn_instagram'] = array(
    'info' => t('Instagram widget'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_menu().
 */
function esn_instagram_menu() {
  $items = array();

  $items['admin/config/content/esn_instagram'] = array(
    'title' => 'ESN Instagram',
    'description' => 'Configuration for ESN Instagram module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('esn_instagram_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: ESN Instagram settings
 *
 * @see esn_instagram_menu()
 */
function esn_instagram_form($form, &$form_state) {
  $form['esn_instagram_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('esn_instagram_username', 'instagram'),
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => t('Your corporative ESN Instagram username'),
    '#required' => TRUE,
  );

  $form['esn_instagram_access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Access key'),
    '#default_value' => variable_get('esn_instagram_access_key', ''),
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => t('Instagram access key. Mail me to sokolov-as-i@yandex.ru or contact fb.com/andresokol to retrieve one.'),
    //'#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Rendering module
 *
 * @return
 * 	 string with widget HTML code
 */
function esn_instagram_contents($data) {
    if($data['media'] == 0) {
        return t('Seems that we\'ve got no posts on Instagram yet, but you still can <a href="//instagram.com/@username">follow us</a>', array('@username' => variable_get('esn_instagram_username', '')), array('html' => true));
    }
    $code = '<link href="https://fonts.googleapis.com/css?family=Grand+Hotel" rel="stylesheet" type="text/css">
    <div class="esn_instagram_container">
        <div class="esn_instagram_header">Follow us on Instagram</div>
        <div class="esn_instagram_userpic_container">';
    $code .= '<div class="esn_instagram_userpic"><img src="' . $data['userpic'] .
                     '"></div><p class="esn_instagram_fullname">' .
                     $data['fullname'] . '</p></div><div class="esn_instagram_userinfo">';
    $code .= '<div><p class="esn_instagram_cnt">' . $data['media'] . '</p>'. 
                '<p class="esn_instagram_cnt_type">posts</p></div>';
    $code .= '<div><p class="esn_instagram_cnt">' . $data['followers'] . '</p>'. 
                '<p class="esn_instagram_cnt_type">followers</p></div>';
    $code .= '<div><p class="esn_instagram_cnt">' . $data['follows'] . '</p>'. 
                '<p class="esn_instagram_cnt_type">follows</p></div>';
    $code .= '<div><a href="//instagram.com/' . variable_get('esn_instagram_username', 'instagram') .'/" class="esn_instagram_follow_button">Follow</a></div>';
    $code .= '</div>';

    $code .= '<div class="esn_instagram_img_container">';

    $imgurls = $data['imgurls'];
    $links = $data['links'];
    for ($i = 0; $i < min(count($links), 9); $i++) { 
        $code .= t('<a href="@link" target="_blank"><img src="@imgurl"></a>',
                array('@link' => $links[$i], '@imgurl' => $imgurls[$i]));
    }
    $code .= '</div></div>';
    return t($code, array(), array('html' => true));
}

function esn_instagram_block_view($delta = '') {
	switch ($delta) {
        case 'esn_instagram':
            $block['subject'] = t('ESN Instagram');
            if (user_access('access content')) {
                $data = $_SESSION['esn_instagram_data'];
                
                $block['content'] = esn_instagram_contents($data);
            }
            return $block;
        }
    }

function esn_instagram_cron() {
    $access_key = variable_get('esn_instagram_access_key', '');
    $username = variable_get('esn_instagram_username', 'instagram');

    if ($access_key == '') {
        watchdog('esn_instagram', 'missing access key', array(), WATCHDOG_ERROR);
        $_SESSION['esn_instagram_data'] = array('media' => 0);
        return;
    }

    $url = 'https://api.instagram.com/v1/users/self/media/recent/?access_token=' . $access_key;
    $ch = curl_init();
    $timeout = 5;
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_FRESH_CONNECT, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    $data = curl_exec($ch);
    curl_close($ch);
    watchdog('esn_instagram', 'requested data from @url, response length: @len, response: @res', array('@url' => $url, '@len' => strlen($data), '@res' => $data), WATCHDOG_INFO);
    $data = json_decode($data, true);

    $url = 'https://api.instagram.com/v1/users/self/?access_token=' . $access_key;
    $ch = curl_init();
    $timeout = 5;
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_FRESH_CONNECT, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    $data2 = curl_exec($ch);
    curl_close($ch);
    watchdog('esn_instagram', 'requested data from @url, response length: @len, response: @res', array('@url' => $url, '@len' => strlen($data2), '@res' => $data2), WATCHDOG_INFO);
    $data2 = json_decode($data2, true);

    $images = array();
    $links = array();
    
    if ($data['meta']['code'] == 200) {
        for ($i = 0; $i < count($data['data']); $i++) {
            $images[] = $data['data'][$i]['images']['thumbnail']['url'];
            $links[] = $data['data'][$i]['link'];
        }
    } else {
        watchdog('esn_instagram', 'answer code to media request is not 200 - "!meta"', array('!meta' => $data['meta']), WATCHDOG_ERROR);
        $_SESSION['esn_instagram_data']['media'] = 0;
        return;
    }

    $media = 0;
    $followers = 0;
    $follows = 0;
    $userpic = '';
    $fullname = '';


    if ($data2['meta']['code'] == 200) {
        $media = $data2['data']['counts']['media'];
        $followers = $data2['data']['counts']['followed_by'];
        $follows = $data2['data']['counts']['follows'];
        $userpic = $data2['data']['profile_picture'];
        $fullname = $data2['data']['full_name'];
    } else {
        watchdog('esn_instagram', 'answer code to info request is not 200 - "!meta"', array('!meta' => $data2['meta']), WATCHDOG_ERROR);
    }
    
    $_SESSION['esn_instagram_data'] = array('imgurls' => $images, 'links' => $links, 'media' => $media, 'followers' => $followers, 'follows' => $follows, 'userpic' => $userpic, 'fullname' => $fullname);
}
